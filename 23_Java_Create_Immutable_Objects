
Immutable Objects:

An object is considered immutable if its state cannot change after it is constructed.
Maximum reliance on immutable objects is widely accepted as a sound strategy for creating simple, reliable code

Immutable objects are particularly useful in concurrent applications.
Since they cannot change state, they cannot be corrupted by thread interference or observed in an inconsistent state.

Programmers are often reluctant to employ immutable objects,
because they worry about the cost of creating a new object as opposed to updating an object in place.
The impact of object creation is often overestimated, and can be offset by some
of the efficiencies associated with immutable objects.
These include decreased overhead due to garbage collection, and the
elimination of code needed to protect mutable objects from corruption.

The following subsections take a class whose instances are mutable and derives a class with
immutable instances from it. In so doing, they give general rules for this kind of conversion
and demonstrate some of the advantages of immutable objects.


1. Don't provide "setter" methods â€” methods that modify fields or objects referred to by fields.

2. Make all fields final and private.

3. Don't allow subclasses to override methods. The simplest way to do this is to declare the class as final.
A more sophisticated approach is to make the constructor private and construct instances in factory methods.

4. If the instance fields include references to mutable objects, don't allow those objects to be changed:
        1) Don't provide methods that modify the mutable objects.
        2) Don't share references to the mutable objects. Never store references to external,
        mutable objects passed to the constructor; if necessary, create copies,
        and store references to the copies. Similarly, create copies of your internal mutable objects
        when necessary to avoid returning the originals in your methods.

References:
1. oracle
https://docs.oracle.com/javase/tutorial/essential/concurrency/imstrat.html
2. immutable arraylist
https://www.baeldung.com/java-immutable-list
3. immutable object
https://www.baeldung.com/java-immutable-object